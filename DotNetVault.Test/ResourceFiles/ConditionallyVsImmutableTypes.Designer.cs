//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotNetVault.Test.ResourceFiles {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ConditionallyVsImmutableTypes {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ConditionallyVsImmutableTypes() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DotNetVault.Test.ResourceFiles.ConditionallyVsImmutableTypes", typeof(ConditionallyVsImmutableTypes).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Collections.Generic;
        ///using System.Collections.Immutable;
        ///using AnalyzerYetAgain.Attributes;
        ///
        ///namespace DotNetVault.Test.TestCases
        ///{
        ///    //Should fail.  Unlike value types, reference types may not have non-readonly fields, 
        ///    //even if the field is an Immutable type.  Contrast with nearly identical struct example.
        ///    [VaultSafe]
        ///    public sealed class ConditionallyImmutClassWithNonROImmutF
        ///    {
        ///        public int Count =&gt; _lookup.Count;
        ///
        ///        public double this[string k [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ConditionallyImmutableClassNonRoImmutF {
            get {
                return ResourceManager.GetString("ConditionallyImmutableClassNonRoImmutF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System.Collections.Generic;
        ///using System.Collections.Immutable;
        ///using AnalyzerYetAgain.Attributes;
        ///
        ///namespace DotNetVault.Test.TestCases
        ///{
        ///    [VaultSafe]
        ///    public struct ConditionallyImmutStructWithNonROImmutF
        ///    {
        ///        public int Count =&gt; _lookup.Count;
        ///
        ///        public double this[string key] =&gt; _lookup[key];
        ///
        ///        public ConditionallyImmutStructWithNonROImmutF(IEnumerable&lt;KeyValuePair&lt;string, double&gt;&gt; items)
        ///        {
        ///            _lookup = ImmutableDictionary&lt;string, do [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ConditionallyImmutStructWithNonROImmutF {
            get {
                return ResourceManager.GetString("ConditionallyImmutStructWithNonROImmutF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Collections.Immutable;
        ///using AnalyzerYetAgain.Attributes;
        ///
        ///namespace DotNetVault.Test.TestCases
        ///{
        ///    [VaultSafe]
        ///    public sealed class ImmutableCollectionIsVaultSafe
        ///    {
        ///        public string LookupName =&gt; _dictionaryName;
        ///
        ///        public DateTime this[string key] =&gt; _timestampDict[key];
        ///
        ///        public ImmutableCollectionIsVaultSafe(IEnumerable&lt;KeyValuePair&lt;string, DateTime&gt;&gt; kvps) : this(kvps,
        ///            DefaultDictiona [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ImmutableCollectionIsVaultSafe {
            get {
                return ResourceManager.GetString("ImmutableCollectionIsVaultSafe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Collections.Immutable;
        ///using AnalyzerYetAgain.Attributes;
        ///
        ///namespace DotNetVault.Test.TestCases
        ///{
        ///    [VaultSafe]
        ///    public struct ImmutableStructIsVaultSafe&lt;[VaultSafeTypeParam] T&gt;
        ///    {
        ///        public readonly string Name =&gt; _name ?? string.Empty;
        ///        public readonly T this[int index] =&gt; _immutableArray[index];
        ///        public readonly int Count =&gt; _immutableArray.Length;
        ///
        ///        public ImmutableStructIsVaultSafe(IEnumera [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ImmutableStructIsVaultSafe {
            get {
                return ResourceManager.GetString("ImmutableStructIsVaultSafe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.Collections.Generic;
        ///using System.Collections.Immutable;
        ///using AnalyzerYetAgain.Attributes;
        ///
        ///namespace DotNetVault.Test.TestCases
        ///{
        ///    [VaultSafe]
        ///    public struct ImmutableStructIsVaultSafe&lt;T&gt; where T : unmanaged
        ///    {
        ///        public readonly string Name =&gt; _name ?? string.Empty;
        ///        public readonly T this[int index] =&gt; _immutableArray[index];
        ///        public readonly int Count =&gt; _immutableArray.Length;
        ///
        ///        public ImmutableStructIsVaultSafe(IEnumerab [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ImmutableStructIsVsUnmanaged {
            get {
                return ResourceManager.GetString("ImmutableStructIsVsUnmanaged", resourceCulture);
            }
        }
    }
}
